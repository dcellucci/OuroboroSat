The main source of actuation for the Kirigami installation is resistive heating of shape-memory alloy springs. The advantages of these actuators include low weight, reasonable strength, and simple construction. However, the high power requirements for resistive heating means that specialized hardware is needed to reliably deliver power to the springs.

We combined this specialized hardware with a decentralized control scheme called an actuation automaton. Each actuation automaton consists of three springs connected to a central node board. Due to the irregular topology, some node boards controlled four springs, with two connected in series. Each node board consists of three MOSFETs that regulate the heating of the SMA springs, an Attiny 84 microcontroller, and a shift register. Several of these boards are then connected in a bus to a central 5 volt 20 amp power supply. 

The microcontroller on each board heats the springs using an open-loop control scheme, turning on each MOSFET for a specific amount of time and allowing the bussed power to flow through the spring, producing the necessary heating energy to cause actuation. Each board activates its constituent springs simultaneously and broadcasts the actuation state to its neighbors. A board can broadcast its status to as many neighbors as necessary, but each board can receive a maximum of eight neighbor states. These states are communicated as a binary string through the shift register. 

We also designed a software automaton that uses this communication and control protocol to produce complex, emergent behavior from a set of simple rules. 

  1) Default behavior is called 'breathing': it involves a slow charge and discharge of the springs accomplished through pulse width modulation of the control MOSFET. The board broadcasts a state of '0' to its neighbors while in the state
  2) The opposite behavior to 'breathing' is 'glowing', where the springs are heated as quickly as possible, producing a quick contraction. While in this state, the board broadcasts a '1' to its neighbors.
  3) While 'breathing', the board uses the shift register to poll the states of its nearest neighbors. The number of 'glowing' neighbors determines the probability that this board will, itself, enter the 'glow' state. When all neighbors are 'glowing', the probability is 1, and when all neighbors are 'breathing', the probability is zero.
  4) After the board enters the 'glow' state, it will remain there for a short time, and then return to a rest state where it 'breathe' but not poll its neighbor's state. 

From this set of rules, a few parameters are of importance to the behavior of the overall system:
  1) the frequency with which the board polls its nearest neighbors for their status, which is, in effect, the sensitivity of a board to its surroundings  
  2) the speed with which contraction occurs, 
  3) the length of the glow state,
  4) the length of time spent resting before going back to polling neighbors

In order to study the effect of the different parameter values on the behavior of the overall system, we constructed a simple simulation that represented the topology of the kirigami installation. The boards in this simulation are all initialized at a random point in the breathing cycle, and specific blocks of nodes can be made to glow at the same time, producing a perturbation of the system that could be introduced in the installation using external sensors or other forms of interaction. Given the proper balance of parameters, these glowing blocks can quickly spread outward, producing traveling waves that successfully spread throughout the array. Moreover, the glow even effectively resets the breathe cycle, resynchronizing the breathing of the boards and producing complex passive behavior that mirrors the spread of the active perturbation. Figure <> shows a screenshot of this simulation, showing the full 

Once the MOSFET is opened to allow charge to flow through the spring, the magnitude of the current draw from the spring is entirely unregulated. We found that multiple springs pulling current in parallel caused the overdraw protections in the voltage supply to turn on, effectively causing a hard reset of both the actuators and the control hardware. In order to prevent this overdraw from crippling the system, we chose a temporary solution of Lead-acid batteries as the power source and centralized control through relays. However, and for the future, we have two solutions we are currently exploring. The first and most obvious fix is to provide an independent power source for the control hardware, so that an overdraw event does not also cause this system to reset. The relatively small power consumption of the control hardware means that this supply will not be as large as those that power the actuation system. 

Secondly, we are currently exploring the implementation of supercapacitors to act as an interim power source for the nitinol springs. These supercapacitors are passively charged from the power supply, and periodically discharged by the control MOSFET through the spring. In this way, the power necessary to heat the nitinol springs is locally stored and replenished asynchronously from the discharge event. 