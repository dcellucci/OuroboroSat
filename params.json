{"name":"OuroboroSat","tagline":"The Modular Satellite Platform","body":"![OuroboroSat logo](https://raw.githubusercontent.com/dcellucci/OuroboroSat/master/assets/logo.png)\r\n_Logo Design [Michelle Fong](http://www.michelle-fong.com/)_\r\n\r\n > I was sitting, writing at my text-book; but the work did not progress; my thoughts were elsewhere. I turned my chair to the fire and dozed. Again the atoms were gamboling before my eyes. This time the smaller groups kept modestly in the background. My mental eye, rendered more acute by the repeated visions of the kind, could now distinguish larger structures of manifold conformation: long rows, sometimes more closely fitted together; all twining and twisting in snake-like motion. But look! What was that? One of the snakes had seized hold of its own tail, and the form whirled mockingly before my eyes. As if by a flash of lightning I awoke; and this time also I spent the rest of the night in working out the consequences of the hypothesis.\r\n > ([August Kekul√©](https://en.wikipedia.org/wiki/Ouroboros#Chemistry))\r\n\r\nOuroboros is the modular satellite platform that combines communication, power-sharing, and the Arduino framework to create a scalable platform for orbital experiments. It's designed to be even smaller than a CubeSat (one sixth, to be exact)\r\n\r\n###What does it do?\r\n\r\nThe Ouroboros board (v. 1.0) can do alot of things. \r\n\r\n  1. It behaves like an Arduino, so it can run Arduino code and libraries\r\n  2. It has the ability to charge an on-board LiPo battery from a solar panel\r\n  3. It can connect to a maximum of four neighbors, and can talk to these four neighbors using a protocol called the Asynchronous Packet Automaton (which you can learn more about [here](https://github.com/dcellucci/APA_Tutorial)).\r\n  4. It can also use this connection to charge a neighbor's battery using its own on-board battery, for which there are plenty of reasons, detailed in a forthcoming paper. \r\n\r\nOuroboros is supposed to be alot like the Iron Man suit- it's the foundation upon which a more complex and specialized iterations can be built. My goal is to make the process of extending both the hardware and the software as easy and transparent as possible.\r\n\r\n###Installation\r\n\r\nYou'll first want to install the software libraries- Ouroboros and its dependencies- as well as the hardware board specification. \r\n\r\n * To install the software libraries, simply copy the contents of `code/libraries` folder to the `libraries` directory of your Arduino sketchbook (you might have to make it). \r\n * To install the board spec, copy the contents of `code/hardware` to the `hardware` directory of the sketchbook (you might thave to make that directory as well).\r\n\r\nCheck out the [advanced installation guide](code/install.md) for a method that doesn't require copying using symbolic links (Linux/OSX only).\r\n\r\n\r\n###Getting Started\r\nThere are plenty of ways to get started. Probably the first and best way is to make your own prototype on a breadboard, which is detailed inside the `boards/breadboard` folder. That way you can practice with the wiring and the code, as well as test what you'll need to add to the existing Ouroboros board in order to get it working with your project.\r\n\r\nThe `Blank_Example` sketch provides a bare-bones implementation of the Ouroboros functionality-\r\n\r\n###License\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\r\n\r\nAll content (except the logo)- designs, text, and code- distributed under the above license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}